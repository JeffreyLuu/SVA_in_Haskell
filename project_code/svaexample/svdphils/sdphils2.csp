

-- sdphils2.csp

-- Dining philosophers implemented using an explicit mutex algorithm and
-- shared variables.

-- Version with analogue of butler.

atom_lev = 1   -- controls whether assignments to butler variable
                     -- atomic, and if so how much (0,1,2)

-- Needs to be atomic level 2 if program is to work, but of course atomicity is
-- a strong assumption about an implementation.

mostprocs = N
ExtReads = {}
ExtWrites = {}
DirtyVars = {}


N = 4 -- The number of philosophers: 
      -- Different checks in this file can manage different numbers.


SymPhils = true -- Determines whether Phil(0) is right or left handed
                -- A classic way of avoiding deadlock is to ensure that
                -- not all the philosophers have the same handedness.

-- Should be true in this file as we are trying to avoid starvation
-- by other means.


-- The following events signal some of the stages of a Phil, and are
-- used in specifications.

channel eats:{0..N-1}
channel lget,lput,rget,rput:{0..N-1}

Signals = {|eats,lget,rput,rget,rput|}
ISignals = {}
Visible = union(Signals,Errors)

ext_atomic = false




include "svacomp.csp"

-- The following define type and initialisation parameters for the compiler.

MinI = 0
MaxI = N
stypes = <>
ditype = {0..N-1}
dctype = {1,2}
ctypes = <(IV.1,{MinI..MaxI})>
catypes = <>
itypes = <>

ivnums = {1}
bvnums = {}
ianums = {1}
banums = {1,2,3}

InitB = false

init = (<>,<>)


-- naming variables

butler = IVar.IV.1
t(i) =  IArc.(IA.1,Const.i) 
sat(i) =  BArc.(BA.3,Const.i) 
bl = let f(i) = BArc.(BA.1,Const.i) within f
br = let f(i) = BArc.(BA.2,Const.i) within f

-- The following routines define the actions of a philosopher gaining/releasing
-- the mutex with its left/right hand neighbour: when it has a mutex it
-- is deemed to have the corresponding fork.

-- The mutex algorithm used here is Peterson's.

lgetmx(i) = SQ.(<
                  bassign(bl(i),True),
                  iassign(t(i),Const.2),
                  While.(BBOp.And.br(i).(CompOp.Eq.t(i).Const.2), Skip),
                  Sig.(lget.i)>)

lrelmx(i) =   SQ.(<bassign(bl(i),False),Sig.(lput.i)>)

rgetmx(i) = SQ.(<
                  bassign(br(i),True),
                  iassign(t(i),Const.1),
                  While.(BBOp.And.bl(i).(CompOp.Eq.t(i).Const.1), Skip),
                  Sig.(rget.i)>)

rrelmx(i) = SQ.(<bassign(br(i),False),Sig.(rput.i)>)


-- The following simplistic approach approximates the actions of the
-- butler or footman from the classic dining philosophers

-- We give options as to how atomically this is done.



at_sit2(i) = SQ.<bassign(sat(i),False),
             While.(Not.sat(i), Atomic.(Cond.(CompOp.Gt.butler.Const.(N-2),Skip,
                                        SQ.<
                                            iassign(butler,BIOp.Plus.butler.Const.1),
                                            bassign(sat(i),True)>)))
                 >

at_sit1(i) = SQ.<
               While.(CompOp.Gt.butler.Const.(N-2), Skip),
               Atomic.iassign(butler,BIOp.Plus.butler.Const.1)>

nonat_sit(i) = SQ.<
               While.(CompOp.Gt.butler.Const.(N-2), Skip),
                      iassign(butler,BIOp.Plus.butler.Const.1)>

sit(i) = if atom_lev == 0 then nonat_sit(i)
         else if atom_lev == 1 then at_sit1(i)
         else  at_sit2(i)

getup(i) = if atom_lev > 0 then
                      Atomic.iassign(butler,BIOp.Minus.butler.Const.1)
                    else
                       iassign(butler,BIOp.Minus.butler.Const.1)



LPhil(i) = Iter.(SQ.<sit(i),lgetmx(i),rgetmx((i+1)%N),Sig.eats.i,rrelmx((i+1)%N),getup(i),lrelmx(i)>)

Phil(i) =  (LPhil(i),({t(i)},{bl(i),br(i)}))

-- System is a list of all thread processes (required by compiler)

System = <Phil(i) | i <- <0..N-1>>
System' = (<Phil(i) | i <- <0..N-1>>,<>)

-- The following set up respectively a balanced binary tree, a maximal-depth
-- tree and a one-level tree representing the same network.

Balanced(i,j) = if i==j then CSLeaf.Phil(i)  
                else let k = (i+j)/2 within
                         CSNode.<Balanced(i,k),Balanced(k+1,j)>

LongTree(i,j) = if i==j then CSLeaf.Phil(i)
                else CSNode.<CSLeaf.Phil(i),LongTree(i+1,j)>

WideTree(i,j) = CSNode.<CSLeaf.Phil(k) | k <- <i..j>>

-- The following are two ways of combining the phils without any compression

BasicPhils = Compile(System')(Visible)

-- The following apply hierarchical compression to the three trees

BalancedPhils = HierarchCompressedCompile(Balanced(0,N-1))(Visible)
WidePhils = HierarchCompressedCompile(WideTree(0,N-1))(Visible)

-- The following applies leaf compression: for any of the trees this should
-- give the same number of states as WidePhils

LCPhils = LeafCompressedStructuredCompile(LongTree(0,N-1))(Visible)

-- The checks below test for error events: demonstrating that
-- our simplistic approach leads to problems

assert STOP [T= BasicPhils\Signals
assert STOP [T= LCPhils\Signals
assert STOP [T= BalancedPhils\Signals
assert STOP [T= WidePhils\Signals

Eaten(0) = STOP
Eaten(n) = eats?i -> if i == n-1 then Eaten(n-1)
                     else Eaten(n)

assert Eaten(N) [T= IndPhils\diff(Signals,{|eats|})
assert Eaten(N) [T= BasicPhils\diff(Signals,{|eats|})




-- If the butler assignment is chosen as atomic, no error is
-- possible to it is reasonable to try some of the 
channel tau,switch,succ


AlwaysR(P,a) = let Sigma = diff(Events,{switch,tau,succ})
                   Reg = [] x:Sigma @ x -> Reg
                         [] switch -> Ph2
                   Ph2 = succ -> Ph2
               within
                   ((P[|union({tau},Sigma)|] Reg)\{|tau|})[[succ <- a]]

-- The above process allows P to perform any trace at all, after which
-- the event switch causes it to stop, and Ph2 introduces an infinite trace
-- of the event a.

-- The process below also allows P to perform any trace followed by
-- switch, but this time P is allowed to carry on with all events other than
-- a hidden.  Thus this process can only perform an infinite trace of a's after
-- switch if there is a trace of P beyond this point with an infinite number
-- of a's in it.


AlwaysL(P,a) = let Sigma = diff(Events,{switch,tau,succ,a})
                   DP = P[[x <- tau, x <- x | x <- Sigma]]
                   Reg = [] x:Sigma @ x -> Reg
                         [] switch -> Ph2
                   Ph2 = tau -> Ph2
               within
                   compress(((compress(DP))[|union({tau},Sigma)|] Reg)\{|tau|})

-- Thus, for a P, 

-- AlwaysL(P,a) [T= AlwaysR(P,a)

-- if and only if P satisfies "after every trace s the event a is reachable"

assert AlwaysL(BalancedPhils,eats.0) [T= AlwaysR(BalancedPhils,eats.0)

