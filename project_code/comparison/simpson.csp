include "refsva.csp"

channel assertionfailed
channel collision
Signals = {| assertionfailed, collision|}

ISignals :: {Int=>Event}
ISignals = Union ({})
ivnums = {1..9}
bvnums = {1..1}
ianums = {1..2}
banums = {1..0}
DirtyVars = Union({{IA.2.x | x <- ditype },{IV.2},{IV.1},{IA.1.x | x <- {0..3}}})
ctypes = <>
catypes = <>
itypes = <(IA.1, {0..3})>
init = (<>,<>)
LocalIVarMapping_Reader_outp() = IV.5
LocalIVarMapping_Reader_rindex() = IV.4
LocalIVarMapping_Reader_rpair() = IV.3
LocalIVarMapping_Writer_inp() = IV.8
LocalIVarMapping_Writer_windex() = IV.7
LocalIVarMapping_Writer_wpair() = IV.6
LocalIVarMapping_Writer_wval() = IV.9
ParReads = Union({})
ParWrites = Union({})
SeqReads = Union({})
SeqWrites = Union({})

mostprocs = 2
ext_atomic=false
MinI = 0
MaxI = 4
InitB = false
InitI = 0
ditype = {0,1}
dctype = {0,1}
Reader() = (Iter.Sq.(Iassign.(IVar.LocalIVarMapping_Reader_rpair(),BIOp.Mod.IVar.IV.2.Const.2),Sq.(Iassign.(IVar.IV.1,IVar.LocalIVarMapping_Reader_rpair()),Sq.(Iassign.(IVar.LocalIVarMapping_Reader_rindex(),BIOp.Mod.IArc.(IA.2,IVar.LocalIVarMapping_Reader_rpair()).Const.2),Sq.(Iassign.(IVar.LocalIVarMapping_Reader_outp(),IArc.(IA.1,BIOp.Plus.BIOp.Times.Const.2.IVar.LocalIVarMapping_Reader_rpair().IVar.LocalIVarMapping_Reader_rindex())),Cond.(CompOp.Eq.IVar.LocalIVarMapping_Reader_outp().Const.1,Sig.collision,Skip)))))
, (Union({{IVar.LocalIVarMapping_Reader_rpair(),IVar.LocalIVarMapping_Reader_rindex(),IVar.LocalIVarMapping_Reader_outp()}}),Union({{}})))
Writer() = (Iter.Sq.(Iassign.(IVar.LocalIVarMapping_Writer_wval(),IVar.LocalIVarMapping_Writer_inp()),Sq.(Iassign.(IVar.LocalIVarMapping_Writer_wpair(),BIOp.Minus.Const.1.BIOp.Mod.IVar.IV.1.Const.2),Sq.(Iassign.(IVar.LocalIVarMapping_Writer_windex(),BIOp.Minus.Const.1.BIOp.Mod.IArc.(IA.2,IVar.LocalIVarMapping_Writer_wpair()).Const.2),Sq.(Iassign.(IArc.(IA.1,BIOp.Plus.BIOp.Times.Const.2.IVar.LocalIVarMapping_Writer_wpair().IVar.LocalIVarMapping_Writer_windex()),IVar.LocalIVarMapping_Writer_wval()),Sq.(Iassign.(IArc.(IA.2,IVar.LocalIVarMapping_Writer_wpair()),IVar.LocalIVarMapping_Writer_windex()),Iassign.(IVar.IV.2,IVar.LocalIVarMapping_Writer_wpair()))))))
, (Union({{IVar.LocalIVarMapping_Writer_wpair(),IVar.LocalIVarMapping_Writer_windex(),IVar.LocalIVarMapping_Writer_inp(),IVar.LocalIVarMapping_Writer_wval()}}),Union({{}})))
WideStruct = HierarchCompressedCompile(CSNode.<CSLeaf.Reader(),CSLeaf.Writer()>) ({| c | c <-Union({Signals,ISignals',Errors}) |})
assert  STOP [T= WideStruct 
