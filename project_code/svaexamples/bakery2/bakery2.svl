// bakery.svl

// Lamport's original bakery algorith implemented for SVA
// As described in Sect 18.5 of Understanding Concurrent Systems

// Bill Roscoe

// first, directions to the SVA compiler
// some of these such as ext_atomic have not been explained by Sect 18.5

%%ext_atomic=false  -- only needed for refinement
%%MinI = 0          -- least member of integer type
%%MaxI = 10          -- greatest member of integer type
%%InitB = false     -- default Boolean initialisation
%%InitI = MinI      -- default integer initialisation
%%ditype = {1..N}   -- default type for array indexing
%%dctype = {MinI..MaxI}  -- default content type for integer arrays
%%LockOrder = <>
%%CheckLockOrder = false

sig css : int, cse : int;   

int[] number;
bool[] choosing
const N = 4;    // number of threads indexed 1..N

PP(i,m) = iter
{
    int j,temp;     // declarations of local variables
    choosing[i] := true;
    if m=1 then //MaxA
         {temp:=0; 
          j:=1;
          while j<=N do
           {temp := max(temp,number[j]);
            j:=j+1};
          number[i] := temp+1}
    else if m=2 then //MaxB
         {j:=1;
          while j <=N do
           {number[i] := max(number[i],number[j]);
            j := j+1};
          number[i] := number[i] +1;}
    else if m=3 then //MaxC
         {j:=1;
          while j<=N do
           {temp := number[j];
            if temp > number[i] then number[i] := temp;
            j := j+1};
          number[i] := number[i]+1}
    else //MaxD
         {j:=1;
          while j<=N do
           {if number[j] > number[i] then number[i] := number[j];
           j := j+1};
           number[i] := number[i]+1};
    j := 1;
    while j <= N do
    {
     while choosing[j] do skip;
     if j >= i then
         while number[j]>0 && number[j] < number[i] do skip
      else
         while number[j]>0 && number[j] <= number[i] do skip;
     j := j + 1;
    };
    sig(css.i);   // start of critical section
    sig(cse.i);   // end of critical section
    number[i] := 0;

}




WideStructA = hierarchCompress < PP(4,1),PP(3,1),PP(2,1),PP(1,1)>
WideStructB = hierarchCompress < PP(4,2),PP(3,2),PP(2,2),PP(1,2)>
WideStructC = hierarchCompress < PP(4,3),PP(3,3),PP(2,3),PP(1,3)>
WideStructD = hierarchCompress < PP(4,4),PP(3,4),PP(2,4),PP(1,4)>



%%SPEC = css?i -> cse!i -> SPEC


assert %- SPEC [T= WideStructA \{|error,verror|} -% in WideStructA
assert %- SPEC [T= WideStructB \{|error,verror|} -% in WideStructB
assert %- SPEC [T= WideStructC \{|error,verror|} -% in WideStructC
assert %- SPEC [T= WideStructD \{|error,verror|} -% in WideStructD


