// simpson5.svl
// Simpson's 4-slot algorithm
// This file demonstrates the solution to the
// sequential inconsistency problem using counters.

// Bill Roscoe


// See Chapter 19 of Understanding Concurrent Systems



%%ext_atomic=false
%%MinI = 0
%%MaxI = 7
%%InitB = false
%%InitI = 0
%%ditype = {0,1}
%%dctype = {0..MaxI}
%%LockOrder = <>
%%CheckLockOrder = false

dirty int[4] slot;
dirty int[] index;
dirty int[4] slotcounter;

dirty int reading,latest;

bool[] okread;
int seqv;
bool seenone;

sig outofseq;

Writer() = 
{int counter;
counter :=0;
iter
{
    int wpair, windex, inp, wval;
    inp := seqv%2;
    counter := counter +1;
    wval := inp;
    wpair := 1 - reading%2;
    windex := 1 - index[wpair];
    slot[2*wpair + windex] := wval;           //These two assignment are to two
    slotcounter[2*wpair + windex] := counter; //halves of a notional slot.
    if index[wpair]=windex then skip else index[wpair] := windex;
    if latest=wpair then skip else latest := wpair;
}}

Reader() = {
    int lastread;
    int lastcounter;
    lastcounter := 0;
    iter
   {
    int rpair, rindex, outp;
    rpair := latest%2;
    if reading=rpair then skip else reading := rpair;
    rindex := index[rpair]%2;
    if slotcounter[2*rpair+rindex] > lastcounter then  // Conditional read
          {outp := slot[2*rpair + rindex];
           lastcounter := slotcounter[2*rpair+rindex]};
    if outp=1 then seenone := true;
    if outp=0 && seenone then sig(outofseq)
}}

Succ() =  {seqv := 0; seqv := 1}


WideStruct = hierarchCompress <Succ(),Reader(),Writer()>


// Note that the counters run out of space in this file,
// so an out of range error is inevitable thanks to
// our finite integer type.


assert %- STOP [T= WideStruct -% in WideStruct
assert %- STOP [T= WideStruct\Errors -% in WideStruct

// It is possible to adapt (in a simpler way) the technique
// used at the end of Chapter 19 to model unbounded orders
// by simulation using a finite type, and thereby give a
// proof of this adapted algorithm in general.
