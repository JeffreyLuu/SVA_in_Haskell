include "Helper2.csp"

-- variable
-- constants
-- lock + lock-order
-- Proc translation
-- Program structure
-- read/write var set by each thread
-- signal set by each thread


datatype Var = PP_j | PP_temp | lock1
datatype Arr = number | choosing | lock2

ivnums = {PP_j, PP_temp}
ianums = {number}
bvnums :: {Var}
bvnums = {}
banums = {choosing}
lvnums = {lock1}
lanums = {lock2}

ext_atomic = false
MinI = 0
MaxI = 10
InitB = false
InitI = MinI
ditype = {1..N}
dctype = {MinI..MaxI}
N = 3
SPEC = css?i->cse!i->SPEC


LockOrder = <LV.lock1, LA.lock2.1, LA.lock2.2, LA.lock2.3>


PP(i, th) = (
  let tmpProc_6() = (
    ((SKIP) ;
    -- (if member(i,itype(lock2)) then Lock!th!LA.lock2.i!lock -> SKIP else error!th -> STOP) ;
    -- (if member(i,itype(lock2)) then Lock!th!LA.lock2.((i-3)%3+1)!lock -> SKIP else error!th -> STOP) ;
    -- (if member(i,itype(lock2)) then Lock!th!LA.lock2.i!unlock -> SKIP else error!th -> STOP) ;
    -- (if member(i,itype(lock2)) then Lock!th!LA.lock2.((i-3)%3+1)!unlock -> SKIP else error!th -> STOP) ;
    -- (Lock!th!LV.lock1!lock -> SKIP) ;
    -- (Lock!th!LV.lock1!unlock -> SKIP) ;
    (if member(i,itype(choosing)) then bvwrite!th!BA.choosing.i!true -> SKIP else error!th -> STOP) ;
    (if member(0,ctype(IV.PP_temp)) then ivwrite!th!IV.PP_temp!0 -> SKIP else error!th -> STOP) ;
    (if member(1,ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!1 -> SKIP else error!th -> STOP) ;
    (let tmpProc_1() = (
      iveval!th!IV.PP_j?PP_jVal_1 -> (
        if (PP_jVal_1) <= (N)
        then (
          ((iveval!th!IV.PP_temp?PP_tempVal_1 -> iveval!th!IV.PP_j?PP_jVal_2 -> (
            if member(PP_jVal_2,itype(number))
            then (
              iveval!th!IA.number.PP_jVal_2?numberVal_1 -> (
                if member((max(PP_tempVal_1, numberVal_1)),ctype(IV.PP_temp)) then ivwrite!th!IV.PP_temp!(max(PP_tempVal_1, numberVal_1)) -> SKIP else error!th -> STOP
              )
            ) else error!th -> STOP
          ) );
          iveval!th!IV.PP_j?PP_jVal_3 -> (
            if member((PP_jVal_3+1),ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!(PP_jVal_3+1) -> SKIP else error!th -> STOP
          ) );
          tmpProc_1()
        ) else SKIP
      )
    ) within tmpProc_1() );
    (iveval!th!IV.PP_temp?PP_tempVal_2 -> (
      if member(i,itype(number)) then if member((PP_tempVal_2+1),ctype(IA.number.i)) then ivwrite!th!IA.number.i!(PP_tempVal_2+1) -> SKIP else error!th -> STOP else error!th -> STOP
    ) );
    (if member(i,itype(choosing)) then bvwrite!th!BA.choosing.i!false -> SKIP else error!th -> STOP) ;
    (if member(1,ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!1 -> SKIP else error!th -> STOP) ;
    (let tmpProc_2() = (
      iveval!th!IV.PP_j?PP_jVal_4 -> (
        if (PP_jVal_4) <= (N)
        then (
          ((let tmpProc_3() = (
            iveval!th!IV.PP_j?PP_jVal_5 -> (
              if member(PP_jVal_5,itype(choosing))
              then (
                bveval!th!BA.choosing.PP_jVal_5?choosingVal_1 -> (
                  if choosingVal_1
                  then (
                    (SKIP) ;
                    tmpProc_3()
                  ) else SKIP
                )
              ) else error!th -> STOP
            )
          ) within tmpProc_3() );
          (iveval!th!IV.PP_j?PP_jVal_6 -> (
            if (PP_jVal_6) >= (i)
            then (
              let tmpProc_4() = (
                iveval!th!IV.PP_j?PP_jVal_7 -> (
                  if member(PP_jVal_7,itype(number))
                  then (
                    iveval!th!IA.number.PP_jVal_7?numberVal_2 -> (
                      if member(i,itype(number))
                      then (
                        iveval!th!IA.number.i?numberVal_3 -> (
                          if (numberVal_2) > (0)and(numberVal_2) < (numberVal_3)
                          then (
                            (SKIP) ;
                            tmpProc_4()
                          ) else SKIP
                        )
                      ) else error!th -> STOP
                    )
                  ) else error!th -> STOP
                )
              ) within tmpProc_4()
            )
            else (
              let tmpProc_5() = (
                iveval!th!IV.PP_j?PP_jVal_8 -> (
                  if member(PP_jVal_8,itype(number))
                  then (
                    iveval!th!IA.number.PP_jVal_8?numberVal_4 -> (
                      if member(i,itype(number))
                      then (
                        iveval!th!IA.number.i?numberVal_5 -> (
                          if (numberVal_4) > (0)and(numberVal_4) <= (numberVal_5)
                          then (
                            (SKIP) ;
                            tmpProc_5()
                          ) else SKIP
                        )
                      ) else error!th -> STOP
                    )
                  ) else error!th -> STOP
                )
              ) within tmpProc_5()
            )
          ) );
          (iveval!th!IV.PP_j?PP_jVal_9 -> (
            if member((PP_jVal_9+1),ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!(PP_jVal_9+1) -> SKIP else error!th -> STOP
          ) );
          SKIP );
          tmpProc_2()
        ) else SKIP
      )
    ) within tmpProc_2() );
    (css!i -> SKIP) ;
    (cse!i -> SKIP) ;
    (if member(i,itype(number)) then if member(0,ctype(IA.number.i)) then ivwrite!th!IA.number.i!0 -> SKIP else error!th -> STOP else error!th -> STOP) ;
    SKIP );
    tmpProc_6()
  ) within tmpProc_6()
)



channel css : AllInts
channel cse : AllInts

Signals = {|css,cse|}

sigSet(3) = {|css.3,cse.3|}
sigSet(2) = {|css.2,cse.2|}
sigSet(1) = {|css.1,cse.1|}

-- datatype Program = ProgList.Seq(Program) | ProgNode.(Program, Seq(VarStruct)) | ProgLeaf.(Proc, Thread)


XX(<>) = ProgList.(<XX(<1>), XX(<2>), XX(<3>)>)
XX(<1>) = ProgNode.(XX(<1,1>), <VS.(BA.choosing.1, NoTh), VS.(IA.number.1, NoTh)>)
XX(<1,1>) = ProgNode.(ProgLeaf.(PP(1,1),1), <VS.(IV.PP_j, YesTh.1), VS.(IV.PP_temp, YesTh.1)>)
XX(<2>) = ProgNode.(XX(<2,1>), <VS.(BA.choosing.2, NoTh), VS.(IA.number.2, NoTh)>)
XX(<2,1>) = ProgNode.(ProgLeaf.(PP(2,2),2), <VS.(IV.PP_j, YesTh.2), VS.(IV.PP_temp, YesTh.2)>)
XX(<3>) = ProgNode.(XX(<3,1>), <VS.(BA.choosing.3, NoTh), VS.(IA.number.3, NoTh)>)
XX(<3,1>) = ProgNode.(ProgLeaf.(PP(3,3),3), <VS.(IV.PP_j, YesTh.3), VS.(IV.PP_temp, YesTh.3)>)

WriteVars(1) = {BA.choosing.1, IA.number.1}
WriteVars(2) = {BA.choosing.2, IA.number.2}
WriteVars(3) = {BA.choosing.3, IA.number.3}

ReadVars(_) = {BA.choosing.1, IA.number.1, BA.choosing.2, IA.number.2, BA.choosing.3, IA.number.3}


WideStruct2 = (ProgramRun(XX(<>), {1,2,3}, True) [|AllLockEvts|] Lock_Chans) \ Union({AllAtomicSet, AllLockEvts, chans})

assert STOP [T= WideStruct2 \{|css,cse|}
assert SPEC [T= WideStruct2 \ Errors
assert WideStruct2 \ Errors :[ deadlock free [F] ]

mostproc = 3

itype(number) = {1..3}
itype(lock2) = {1..3}
itype(_) = ditype

ctype(_) = dctype

initIMap = (<(PP_j, 1)>, <(number, seq({1,2,3}))>)
initBMap = (<(lock1, false)>, <(choosing, <true, true, false>), (lock2, <true, true, false>)>)
-- initIMap = (<>, <>)
-- initBMap = (<>, <>)
-- initLMap = (<>, <>)


-- DirtyVars = union({IV.reading, IV.latest}, {IA.v.i | v <- {slot, index}, i <- itype(v)})
DirtyVars = {}
-- DirtyVars = Union({{BA.choosing.i| i <-itype(choosing)}})
