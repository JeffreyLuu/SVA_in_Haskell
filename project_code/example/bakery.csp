include "Helper.csp"

datatype Var = PP_j | PP_temp
datatype Arr = number | choosing

ivnums = {PP_j, PP_temp}
ianums = {number}
bvnums :: {Var}
bvnums = {}
banums = {choosing}

ext_atomic = false
MinI = 0
MaxI = 10
InitB = false
InitI = MinI
ditype = {1..N}
dctype = {MinI..MaxI}
N = 3
SPEC = css?i->cse!i->SPEC


PP(i,th) = let tmpProc_6() = (((((SKIP); ((if member(i,itype(choosing)) then bvwrite!th!BA.choosing.i!true -> SKIP else error!th -> STOP); ((if member(0,ctype(IV.PP_temp)) then ivwrite!th!IV.PP_temp!0 -> SKIP else error!th -> STOP); ((if member(1,ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!1 -> SKIP else error!th -> STOP); ((let tmpProc_1() = (iveval!th!IV.PP_j?PP_jVal_1 -> if (PP_jVal_1) <= (N) then ((((iveval!th!IV.PP_temp?PP_tempVal_1 -> iveval!th!IV.PP_j?PP_jVal_2 -> if member(PP_jVal_2,itype(number)) then iveval!th!IA.number.PP_jVal_2?numberVal_1 -> if member((max(PP_tempVal_1, numberVal_1)),ctype(IV.PP_temp)) then ivwrite!th!IV.PP_temp!(max(PP_tempVal_1, numberVal_1)) -> SKIP else error!th -> STOP else error!th -> STOP); iveval!th!IV.PP_j?PP_jVal_3 -> if member((PP_jVal_3+1),ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!(PP_jVal_3+1) -> SKIP else error!th -> STOP)); tmpProc_1()) else SKIP) within tmpProc_1()); ((iveval!th!IV.PP_temp?PP_tempVal_2 -> if member(i,itype(number)) then if member((PP_tempVal_2+1),ctype(IA.number.i)) then ivwrite!th!IA.number.i!(PP_tempVal_2+1) -> SKIP else error!th -> STOP else error!th -> STOP); ((if member(i,itype(choosing)) then bvwrite!th!BA.choosing.i!false -> SKIP else error!th -> STOP); ((if member(1,ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!1 -> SKIP else error!th -> STOP); ((let tmpProc_2() = (iveval!th!IV.PP_j?PP_jVal_4 -> if (PP_jVal_4) <= (N) then ((((let tmpProc_3() = (iveval!th!IV.PP_j?PP_jVal_5 -> if member(PP_jVal_5,itype(choosing)) then bveval!th!BA.choosing.PP_jVal_5?choosingVal_1 -> if choosingVal_1 then ((SKIP); tmpProc_3()) else SKIP else error!th -> STOP) within tmpProc_3()); ((iveval!th!IV.PP_j?PP_jVal_6 -> if (PP_jVal_6) >= (i) then let tmpProc_4() = (iveval!th!IV.PP_j?PP_jVal_7 -> if member(PP_jVal_7,itype(number)) then iveval!th!IA.number.PP_jVal_7?numberVal_2 -> iveval!th!IV.PP_j?PP_jVal_8 -> if member(PP_jVal_8,itype(number)) then iveval!th!IA.number.PP_jVal_8?numberVal_3 -> if member(i,itype(number)) then iveval!th!IA.number.i?numberVal_4 -> if (numberVal_2) > (0)and(numberVal_3) < (numberVal_4) then ((SKIP); tmpProc_4()) else SKIP else error!th -> STOP else error!th -> STOP else error!th -> STOP) within tmpProc_4() else let tmpProc_5() = (iveval!th!IV.PP_j?PP_jVal_9 -> if member(PP_jVal_9,itype(number)) then iveval!th!IA.number.PP_jVal_9?numberVal_5 -> iveval!th!IV.PP_j?PP_jVal_10 -> if member(PP_jVal_10,itype(number)) then iveval!th!IA.number.PP_jVal_10?numberVal_6 -> if member(i,itype(number)) then iveval!th!IA.number.i?numberVal_7 -> if (numberVal_5) > (0)and(numberVal_6) <= (numberVal_7) then ((SKIP); tmpProc_5()) else SKIP else error!th -> STOP else error!th -> STOP else error!th -> STOP) within tmpProc_5()); ((iveval!th!IV.PP_j?PP_jVal_11 -> if member((PP_jVal_11+1),ctype(IV.PP_j)) then ivwrite!th!IV.PP_j!(PP_jVal_11+1) -> SKIP else error!th -> STOP); SKIP)))); tmpProc_2()) else SKIP) within tmpProc_2()); ((css!i -> SKIP); ((cse!i -> SKIP); ((if member(i,itype(number)) then if member(0,ctype(IA.number.i)) then ivwrite!th!IA.number.i!0 -> SKIP else error!th -> STOP else error!th -> STOP); SKIP))))))))))))); tmpProc_6())) within tmpProc_6()

channel css : AllInts
channel cse : AllInts

sigSet(3) = {|css.3,cse.3|}
sigSet(2) = {|css.2,cse.2|}
sigSet(1) = {|css.1,cse.1|}


SyncOn(7) = inter(ThreadEvtSet(3),Union({LocV(IV.PP_j, 3), LocV(IV.PP_temp, 3)}))
SyncOn(6) = Union({inter(Allow(7),Union({GlbV(IA.choosing.3), GlbV(IA.number.3)})), writeSet(BA.choosing.3), writeSet(IA.number.3)})
SyncOn(5) = inter(ThreadEvtSet(2),Union({LocV(IV.PP_j, 2), LocV(IV.PP_temp, 2)}))
SyncOn(4) = Union({inter(Allow(5),Union({GlbV(IA.choosing.2), GlbV(IA.number.2)})), writeSet(BA.choosing.2), writeSet(IA.number.2)})
SyncOn(3) = inter(ThreadEvtSet(1),Union({LocV(IV.PP_j, 1), LocV(IV.PP_temp, 1)}))
SyncOn(2) = Union({inter(Allow(3),Union({GlbV(IA.choosing.1), GlbV(IA.number.1)})), writeSet(BA.choosing.1), writeSet(IA.number.1)})
SyncOn(1) = Union({SyncOn(6), SyncOn(4), SyncOn(2)})


Allow(7) = Union({ThreadEvtSet(3),Union({LocV(IV.PP_j, 3), LocV(IV.PP_temp, 3)}),Union({sigSet(i) | i <-{3}}),Union({errSet(i) | i <-{3}})})
Allow(6) = Union({Allow(7),Union({GlbV(IA.choosing.3), GlbV(IA.number.3)})})
Allow(5) = Union({ThreadEvtSet(2),Union({LocV(IV.PP_j, 2), LocV(IV.PP_temp, 2)}),Union({sigSet(i) | i <-{2}}),Union({errSet(i) | i <-{2}})})
Allow(4) = Union({Allow(5),Union({GlbV(IA.choosing.2), GlbV(IA.number.2)})})
Allow(3) = Union({ThreadEvtSet(1),Union({LocV(IV.PP_j, 1), LocV(IV.PP_temp, 1)}),Union({sigSet(i) | i <-{1}}),Union({errSet(i) | i <-{1}})})
Allow(2) = Union({Allow(3),Union({GlbV(IA.choosing.1), GlbV(IA.number.1)})})
Allow(1) = Union({Allow(6), Allow(4), Allow(2)})


Prog(7) = compress((PP(3, 3)[|SyncOn(7)|](IV_Chan(IV.PP_j, initI(IV.PP_j), YesTh.3)|||IV_Chan(IV.PP_temp, initI(IV.PP_temp), YesTh.3))) \ SyncOn(7))
Prog(6) = compress((Prog(7)[|SyncOn(6)|](BV_Chan(BA.choosing.3, initB(BA.choosing.3), NoTh)|||IV_Chan(IA.number.3, initI(IA.number.3), NoTh))) \ SyncOn(6))
Prog(5) = compress((PP(2, 2)[|SyncOn(5)|](IV_Chan(IV.PP_j, initI(IV.PP_j), YesTh.2)|||IV_Chan(IV.PP_temp, initI(IV.PP_temp), YesTh.2))) \ SyncOn(5))
Prog(4) = compress((Prog(5)[|SyncOn(4)|](BV_Chan(BA.choosing.2, initB(BA.choosing.2), NoTh)|||IV_Chan(IA.number.2, initI(IA.number.2), NoTh))) \ SyncOn(4))
Prog(3) = compress((PP(1, 1)[|SyncOn(3)|](IV_Chan(IV.PP_j, initI(IV.PP_j), YesTh.1)|||IV_Chan(IV.PP_temp, initI(IV.PP_temp), YesTh.1))) \ SyncOn(3))
Prog(2) = compress((Prog(3)[|SyncOn(2)|](BV_Chan(BA.choosing.1, initB(BA.choosing.1), NoTh)|||IV_Chan(IA.number.1, initI(IA.number.1), NoTh))) \ SyncOn(2))
Prog(1) = ((|| i: {6,4,2} @ [Allow(i)] Prog(i)) \ chans)

WideStruct = Prog(1)


assert STOP [T= WideStruct \{|css,cse|}
assert SPEC [T= WideStruct \ Errors


Signals = {|css,cse|}

mostproc = 3

itype(_) = ditype
ctype(_) = dctype
initI(_) = InitI
initB(_) = InitB

-- DirtyVars = union({IV.reading, IV.latest}, {IA.v.i | v <- {slot, index}, i <- itype(v)})
-- DirtyVars = {}
DirtyVars = Union({{BA.choosing.i| i <-itype(choosing)}})
