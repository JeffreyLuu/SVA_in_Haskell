
-- sdphils.csp

-- Bill Roscoe

-- Dining philosophers implemented using an explicit mutex algorithm and
-- shared variables, presented in the CSPM data type format for the
-- compiler svacomp.csp.

-- You cannot use this style of file with the SVA front end: it simply
-- runs on FDR.

-- This file illustrates
-- (i) Structured compression operators for shared variable programs
-- (ii) An advanced specification technique for these.

N = 6 -- The number of philosophers: 
      -- Different checks in this file can manage different numbers.
mostprocs = N

SymPhils = false -- Determines whether Phil(0) is right or left handed
                -- A classic way of avoiding deadlock is to ensure that
                -- not all the philosophers have the same handedness.


-- The following events signal some of the stages of a Phil, and are
-- used in specifications.

channel eats:{0..N-1}
channel rget,lget,lput,rput:{0..N-1}

Signals = {|eats,lget,rget,lput,rput|}
ISignals :: {Int=>Event}
ISignals = Union ({})

DirtyVars = {}
ExtReads = {}
ExtWrites = {}
ext_atomic = false


include "svacomp.csp"

-- The following define type and initialisation parameters for the compiler.

MinI = 0
MaxI = N
stypes = <>
ditype = {0..N-1}
dctype = {1,2}
ctypes = <>
catypes = <>
itypes = <>

ivnums = {}
bvnums = {}
ianums = {1}
banums = {1,2}


InitB = false

init = (<>,<>)


-- naming variables

t(i) =  IArc.(IA.1,Const.i) 
bl = let f(i) = BArc.(BA.1,Const.i) within f
br = let f(i) = BArc.(BA.2,Const.i) within f

-- The following routines define the actions of a philospher gaining/releasing
-- the mutex with its left/right hand neighbour: when it has a mutex it
-- is deemed to have the corresponding fork.

-- The mutex algorithm used here is Peterson's.

lgetmx(i) = SQ.(<
                  bassign(bl(i),True),
                  iassign(t(i),Const.2),
                  While.(BBOp.And.br(i).(CompOp.Eq.t(i).Const.2), Skip),
                  Sig.(lget.i)>)

lrelmx(i) = SQ.<bassign(bl(i),False),Sig.(lput.i)>

rgetmx(i) = SQ.(<
                  bassign(br(i),True),
                  iassign(t(i),Const.1),
                  While.(BBOp.And.bl(i).(CompOp.Eq.t(i).Const.1), Skip),
                  Sig.(rget.i)>)

rrelmx(i) = SQ.<bassign(br(i),False),Sig.(rput.i)>

-- We can therefore define right- and left-handed philosophers.

RPhil(i) = Iter.(SQ.<rgetmx((i+1)%N),lgetmx(i),Sig.eats.i,rrelmx((i+1)%N),lrelmx(i)>)

LPhil(i) = Iter.(SQ.<lgetmx(i),rgetmx((i+1)%N),Sig.eats.i,rrelmx((i+1)%N),lrelmx(i)>)

Phil(i) = (if i==0 and not(SymPhils) then RPhil(i)
          else LPhil(i),({t(i)},{bl(i),br(i)}))

-- System is a list of all thread processes (required by compiler)

System = <Phil(i) | i <- <0..N-1>>

System' = (System,<>) -- no monitors


-- The following set up respectively a balanced binary tree, a maximal-depth
-- tree and a one-level tree representing the same network.

Balanced(i,j) = if i==j then CSLeaf.Phil(i)  
                else let k = (i+j)/2 within
                         CSNode.<Balanced(i,k),Balanced(k+1,j)>

LongTree(i,j) = if i==j then CSLeaf.Phil(i)
                else CSNode.<CSLeaf.Phil(i),LongTree(i+1,j)>

WideTree(i,j) = CSNode.<CSLeaf.Phil(k) | k <- <i..j>>

-- The following are two ways of combining the phils without any compression

BasicPhils = HierarchCompressedCompile(LongTree(0,N-1))(Signals)

AllEvs = Union({{|ivwrite,iveval,bvwrite,bveval|},Signals,Errors})

-- The following apply hierarchical compression to the three trees

BalancedPhils = HierarchCompressedCompile(Balanced(0,N-1))(Signals)
IndPhils = HierarchCompressedCompile(LongTree(0,N-1))(Signals)
WidePhils = HierarchCompressedCompile(WideTree(0,N-1))(Signals)

-- The following applies leaf compression: for any of the trees this should
-- give the same number of states as WidePhils

LCPhils = LeafCompressedStructuredCompile(LongTree(0,N-1))(Signals)

-- The checks below check for runtime errors (there are none) and
-- count states.

assert STOP [T= BasicPhils\Signals
assert STOP [T= BalancedPhils\Signals
assert STOP [T= LCPhils\Signals
assert STOP [T= IndPhils\Signals
assert STOP [T= WidePhils\Signals

-- To demonstrate how the network works, the following specification says
-- that the network can't have the philosophers all eat in descending order
-- and then eat again.  This should fail.  

-- The counter examines show how the different compression styles affect how
-- the behaviour appears in the debugger.

Eaten(0) = STOP
Eaten(n) = eats?i -> if i == n-1 then Eaten(n-1)
                     else Eaten(n)

assert Eaten(N) [T= IndPhils\diff(Events,{|eats|})
assert Eaten(N) [T= BalancedPhils\diff(Events,{|eats|})
assert Eaten(N) [T= WidePhils\diff(Events,{|eats|})
assert Eaten(N) [T= BasicPhils\diff(Events,{|eats|})

-- AlwaysPossible

-- Deadlock does not occur in shared variable programs in our language, since
-- no thread is ever blocked from execution.  The corresponding behaviour
-- in this network is Starvation: it can be impossible for a node to make
-- real progress as opposed to simply performing the steps of a busy wait.

-- To check the absence of Starvation we would like to be able to show that,
-- from any state at all, each eat.i event is possible at some point in the
-- future.  That is not possible using a conventional check of the form
-- Spec [T= Imp where  Spec is fixed and Imp is the system we are checking.
-- That is because taking away these actions makes our system more refined. 

-- The following illustrates a way of doing this that used a different (and
-- more complex) form of check.  

-- We define two contexts, AlwaysR and AlwaysL, respectively for use on the
-- right and left sides of a trace check, that together say that the
-- event a can occur after any trace of a process P (but not necessarily
-- immediately).

channel tau,switch,succ


AlwaysR(P,a) = let Sigma = diff(Events,{switch,tau,succ})
                   Reg = [] x:Sigma @ x -> Reg
                         [] switch -> Ph2
                   Ph2 = succ -> Ph2 
               within
                   compress((P[|union({tau},Sigma)|] Reg)\{|tau|})[[succ <- a]]

-- The above process allows P to perform any trace at all, after which
-- the event switch causes it to stop, and Ph2 introduces an infinite trace
-- of the event a.

-- The process below also allows P to perform any trace followed by
-- switch, but this time P is allowed to carry on with all events other than
-- a hidden.  Thus this process can only perform an infinite trace of a's after
-- switch if there is a trace of P beyond this point with an infinite number
-- of a's in it.

AlwaysL(P,a) = let Sigma = diff(Events,{switch,tau,succ,a})
                   DP = P[[x <- tau, x <- x | x <- Sigma]]
                   Reg = [] x:Sigma @ x -> Reg
                         [] switch -> Ph2
                   Ph2 = tau -> Ph2 
               within
                   ((DP[|union({tau},Sigma)|] Reg)\{|tau|})

-- Thus, for a P, 

-- AlwaysL(P,a) [T= AlwaysR(P,a)

-- if and only if P satisfies "after every trace s the event a is reachable"
-- Note that this is not exactly the same as saying that after every STATE
-- a is reachable, but that cannot be expressed in CSP models.

assert AlwaysL(IndPhils,eats.0) [T= AlwaysR(IndPhils,eats.0)
assert AlwaysL(BasicPhils,eats.0) [T= AlwaysR(BasicPhils,eats.0)

